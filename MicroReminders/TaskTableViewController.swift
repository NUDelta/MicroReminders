//
//  TaskTableViewController.swift
//  MicroReminders
//
//  Created by Sasha Weiss on 5/14/16.
//  Copyright Â© 2016 Sasha Weiss. All rights reserved.
//

import UIKit
import Firebase
import SwiftyJSON

class TaskTableViewController: UITableViewController {
    
    let tasksref = FIRDatabase.database().reference()
    let microtasksref = FIRDatabase.database().reference()
    let my_id = UIDevice.currentDevice().identifierForVendor!.UUIDString
    
    var tasks_list = [task]()

    struct task {
        var mainTask = String()
        var microtasks = [String]()
        var locations = [String]()
        var step = Int()
        var completed = Bool()
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        
        fillTasksList()
        print(tasks_list)
    }

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return tasks_list.count
    }

    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let identifier = "TaskTableViewCell"
        let cell = tableView.dequeueReusableCellWithIdentifier(identifier, forIndexPath: indexPath) as! TaskTableViewCell

        let task = tasks_list[indexPath.row]
        
        print("task", task)
        
        cell.currStep.text = "Current task: \(task.microtasks[task.step - 1])"
        cell.TaskNameLabel.text = task.mainTask
        cell.mt1Label.text = task.microtasks[0]
        cell.mt2Label.text = task.microtasks[1]
        cell.mt3Label.text = task.microtasks[2]
        cell.loc1Label.text = task.locations[0]
        cell.loc2Label.text = task.locations[1]
        cell.loc3Label.text = task.locations[2]
        
        return cell
    }
    
    /* Fill the list of tasks for display */
    func fillTasksList(){
        tasksref.queryOrderedByChild("owner").queryEqualToValue(my_id).observeSingleEventOfType(.Value, withBlock: { snapshot in
            let tasks = JSON(snapshot.value!)
            for (key, value) in tasks {
                if value["completed"].boolValue {
                    continue
                }
                self.microtasksref.queryOrderedByChild("owner").queryEqualToValue(key).observeSingleEventOfType(.Value, withBlock: { snapshot in
                    let microtasks = JSON(snapshot.value!)
                    var t = task()
                    
                    t.completed = value["completed"].boolValue
                    t.step = value["step"].intValue + 1
                    t.mainTask = value["description"].stringValue
                    for (_, value) in microtasks {
                        t.microtasks.append(value["description"].stringValue)
                        t.locations.append(value["context"].stringValue)
                    }
                    
                    self.tasks_list.append(t)
                    self.tableView.reloadData()
                })
            }
        })
    }
    
    
    
    
    
    
    
    
    
    
    //************************************ autogenerated code
    
    /*
    // Override to support conditional editing of the table view.
    override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {
        // Return false if you do not want the specified item to be editable.
        return true
    }
    */

    /*
    // Override to support editing the table view.
    override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {
        if editingStyle == .Delete {
            // Delete the row from the data source
            tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .Fade)
        } else if editingStyle == .Insert {
            // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
        }    
    }
    */

    /*
    // Override to support rearranging the table view.
    override func tableView(tableView: UITableView, moveRowAtIndexPath fromIndexPath: NSIndexPath, toIndexPath: NSIndexPath) {

    }
    */

    /*
    // Override to support conditional rearranging of the table view.
    override func tableView(tableView: UITableView, canMoveRowAtIndexPath indexPath: NSIndexPath) -> Bool {
        // Return false if you do not want the item to be re-orderable.
        return true
    }
    */

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */

}
